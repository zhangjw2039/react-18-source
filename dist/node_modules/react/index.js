(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

    const void0 = void 0;

    /**
     * jsx 方法
     * elementType props ...maybeChildren
     */
    function jsx(type, props, ...maybeChildren) {
        const _props = {};
        let key = null;
        let ref = null;
        for (const prop in props) {
            const val = props[prop];
            if (prop === "key") {
                if (val !== void0) {
                    key = val + "";
                }
                continue;
            }
            if (prop === "ref") {
                if (val !== void0) {
                    ref = val;
                }
                continue;
            }
            if (Object.prototype.hasOwnProperty.call(props, prop)) {
                _props[prop] = val;
            }
        }
        const maybeChildrenLength = maybeChildren.length;
        if (maybeChildrenLength) {
            if (maybeChildrenLength === 1) {
                props.children = maybeChildren[0];
            }
            else {
                props.children = maybeChildren;
            }
        }
        return jsx(type, key, ref, _props);
    }

    var index = {
        version: "0.0.0",
        createElement: jsx
    };

    return index;

}));
