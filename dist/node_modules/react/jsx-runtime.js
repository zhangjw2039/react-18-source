(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

    const supportSymbol = typeof Symbol === "function" && Symbol.for;
    const REACT_ELEMENT_TYPE = supportSymbol ? Symbol.for("react.type") : 0xeca7;

    const void0 = void 0;

    /**
     * ReactElement
     * type
     * key
     * ref
     * props
     */
    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$type: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            __mark: "zhangjw2039",
        };
        return element;
    };
    /**
     * jsx 方法
     * elementType props ...maybeChildren
     */
    function jsx(type, props, ...maybeChildren) {
        const _props = {};
        let key = null;
        let ref = null;
        for (const prop in props) {
            const val = props[prop];
            if (prop === "key") {
                if (val !== void0) {
                    key = val + "";
                }
                continue;
            }
            if (prop === "ref") {
                if (val !== void0) {
                    ref = val;
                }
                continue;
            }
            if (Object.prototype.hasOwnProperty.call(props, prop)) {
                _props[prop] = val;
            }
        }
        const maybeChildrenLength = maybeChildren.length;
        if (maybeChildrenLength) {
            if (maybeChildrenLength === 1) {
                props.children = maybeChildren[0];
            }
            else {
                props.children = maybeChildren;
            }
        }
        return jsx(type, key, ref, _props);
    }
    const jsxDEV = jsx;

    exports.ReactElement = ReactElement;
    exports.jsx = jsx;
    exports.jsxDEV = jsxDEV;

}));
